@using Medulla.Editor.Client.Components.PropertiesWindow
@using Medulla.Editor.Client.Library.Utilities.Unique
@using Medulla.Editor.Client.Components.PaletteWindow
@using Medulla.Editor.Client.Components.TreeView
@using Medulla.Editor.Client.Library.Abstractions.Environment
@using System.Reflection;

<div class="d-flex flex-row">
    <CascadingValue Value="this">
        <div class="width-full" style="max-width: 70vw">
            <EditorView EditorViewNode="EditorViewNode" />
        </div>
        <div style="width: 40vw;max-height:100vh;overflow: scroll;">
            <ColumnManager Editor="this" />
            <DataSources Editor="this" />
            <PagesWindow />
            <TranslateComponentWindow Editor="this" />
            <PaletteWindow ComponentCategories="_paletteComponentCategories" />
            <PropertiesWindow DataSources="@dataSources" Editor="this" PropertyList="_properties" />
            <YamlViewerWindow Editor="this" />
        </div>
    </CascadingValue>
</div>


@code {

    public EditorViewNode? CurrentComponent { get; set; } = default!;
    public UniqueId? CurrentPropertiesForComponentUniqueId;
    public UniqueId? PlaceInUniqueId { get; set; }
    public UniqueId? RemoveComponentOnHoverLeaveWithUniqueId { get; set; }
    public bool IsHoverComponentContainer = false;
    public UniqueId? LastActiveContainer { get; set; }
    public List<UniqueId> ActiveContainers { get; set; } = new();
    public bool CanHover { get; set; } = false;
    public UniqueId? CurrentHoveringUniqueId { get; set; }
    public bool PlaceAfter { get; set; } = false;
    public EditorViewNode? WrapElementWithEditorViewNode = null;
    public bool DeleteColumns { get; set; } = false;
    public bool PreviewMode { get; set; } = false;
    public List<DataSource> dataSources { get; set; } = new();

    public void dataSourcesUpdated(List<DataSource> _dataSources)
    {
        dataSources = _dataSources;
        StateChanged();
    }

    public bool DoesEditorViewNodeHaveChildrenWithUniqueId(EditorViewNode? editorViewNode, UniqueId uniqueId, ref bool found)
    {
        found = false;
        if (editorViewNode?.UniqueId != null && editorViewNode.UniqueId.Equals(uniqueId))
        {
            found = true;
            if (editorViewNode.Children.Count > 0) return true;
            else return false;
        }
        if (editorViewNode != null)
            for (int i = 0; i < editorViewNode.Children.Count; i++)
            {
                var id = editorViewNode.Children[i]!.UniqueId;
                if (id != null && id.Equals(uniqueId))
                {
                    found = true;
                    if (editorViewNode.Children[i]!.Children.Count > 0)
                        return true;
                    else return false;
                }
                bool wasFound = false;
                bool hasChildren = DoesEditorViewNodeHaveChildrenWithUniqueId(editorViewNode.Children[i], uniqueId, ref wasFound);
                if (wasFound)
                {
                    return hasChildren;
                }
            }
        return false;
    }

    public List<EditorViewNode?> FindAllEditorViewNodesWithType(EditorViewNode? editorViewNode, string Type, List<EditorViewNode?> listOfEditorViewNodes)
    {
        if (editorViewNode!.Type.Equals(Type))
        {
            listOfEditorViewNodes.Add(editorViewNode);
        }
        for (int i = 0; i < editorViewNode.Children.Count; i++)
        {
            if (editorViewNode.Children[i]!.Type.Equals(Type))
            {
                listOfEditorViewNodes.Add(editorViewNode.Children[i]);
            }
            FindAllEditorViewNodesWithType(editorViewNode.Children[i], Type, listOfEditorViewNodes);
        }
        return listOfEditorViewNodes;
    }

    public void RemoveAllEditorViewNodesWithType(EditorViewNode? editorViewNode, string Type)
    {
        var nodes = FindAllEditorViewNodesWithType(editorViewNode, Type, new List<EditorViewNode?>());
        foreach (var node in nodes)
        {
            RemoveComponentWithUniqueId(EditorViewNode, node!.UniqueId);
        }
        StateChanged();
    }

    public int GetDepthOfEditorViewNodeWithUniqueId(EditorViewNode? editorViewNode, UniqueId? uniqueId, int count)
    {
        if (editorViewNode!.UniqueId!.Equals(uniqueId))
        {
            return count;
        }
        for (int i = 0; i < editorViewNode.Children.Count; i++)
        {
            int foundCount = GetDepthOfEditorViewNodeWithUniqueId(editorViewNode.Children[i], uniqueId, count + 1);
            if (foundCount != -1)
            {
                return foundCount;
            }
        }
        return -1;
    }

    public EditorViewNode? EditorViewNode { get; set; } = new()
    {
        Type = "Medulla.Editor.Client.Components.RegisteredComponents.Containers.Grids.Columns.OneColumnGrid",
        Children = {
		new EditorViewNode() {
		  Type = "Medulla.Editor.Client.Components.RegisteredComponents.Containers.Flex",
		  UniqueId = new (),
          Children = {
                new EditorViewNode() {
		            Type = "Medulla.Editor.Client.Components.RegisteredComponents.Containers.Grids.Columns.Column",
		            UniqueId = new (),
                    Children = {},
                    IsContainer = false
		        }
            }
		}
	},
        UniqueId = new UniqueId()
    };

    public bool AddComponentToEditorViewNode(EditorViewNode? editorViewNode)
    {
        if (editorViewNode!.UniqueId!.Equals(PlaceInUniqueId))
        {
            if (WrapElementWithEditorViewNode != null)
            {
                WrapElementWithEditorViewNode.Children.Add(CurrentComponent);
                editorViewNode.Children.Add(WrapElementWithEditorViewNode);
            }
            else
            {
                editorViewNode.Children.Add(CurrentComponent);
            }
            return true;
        }
        else
        {
            var foundIndex = -1;
            for (var i = 0; i < editorViewNode.Children.Count; i++)
            {
                if (editorViewNode!.Children[i]!.UniqueId!.Equals(PlaceInUniqueId))
                {
                    foundIndex = i;
                }
            }
            if (foundIndex != -1)
            {
                if (PlaceAfter)
                {
                    if (WrapElementWithEditorViewNode != null)
                    {
                        WrapElementWithEditorViewNode.Children.Add(CurrentComponent);
                        editorViewNode.Children.Insert(foundIndex + 1, WrapElementWithEditorViewNode);
                    }
                    else
                    {
                        editorViewNode.Children.Insert(foundIndex + 1, CurrentComponent);
                    }
                    PlaceAfter = false;
                }
                else
                {
                    if (WrapElementWithEditorViewNode != null)
                    {
                        WrapElementWithEditorViewNode.Children.Add(CurrentComponent);
                        editorViewNode!.Children[foundIndex]!.Children.Add(WrapElementWithEditorViewNode);
                    }
                    else
                    {
                        editorViewNode!.Children[foundIndex]!.Children.Add(CurrentComponent);
                    }
                }
                return true;
            }
            else
            {
                for (var i = 0; i < editorViewNode.Children.Count; i++)
                {
                    bool wasAdded = AddComponentToEditorViewNode(editorViewNode.Children[i]);
                    if (wasAdded)
                    {
                        return true;
                    }
                }
                return false;
            }
        }
    }

    public bool RemoveComponentWithUniqueId(EditorViewNode? editorViewNode, UniqueId? uniqueId)
    {
        for (var i = 0; i < editorViewNode!.Children.Count; i++)
        {
            if (editorViewNode!.Children[i]!.UniqueId!.Equals(uniqueId))
            {
                editorViewNode.Children.RemoveAt(i);
            }
            else
            {
                RemoveComponentWithUniqueId(editorViewNode.Children[i], uniqueId);
            }
        }
        return true;
    }

    public void SetEditorViewNodeParameterIfUniqueIdEquals(EditorViewNode? editorViewNode, string name, string value)
    {
        if (editorViewNode!.UniqueId!.Equals(CurrentPropertiesForComponentUniqueId))
        {
            editorViewNode.Parameters[name] = value;
        }
        else
        {
            for (var i = 0; i < editorViewNode.Children.Count; i++)
            {
                SetEditorViewNodeParameterIfUniqueIdEquals(editorViewNode.Children[i], name, value);
            }
        }

    }

    public string? GetEditorViewNodeParameterIfUniqueIdEquals(EditorViewNode? editorViewNode, string name)
    {
        if (editorViewNode!.UniqueId!.Equals(CurrentPropertiesForComponentUniqueId))
        {
            string? paramValue = editorViewNode!.Parameters[name]!.ToString();
            if (paramValue == null)
            {
                return "";
            }
            else
            {
                return paramValue;
            }
        }
        else
        {
            for (var i = 0; i < editorViewNode.Children.Count; )
            {
                return GetEditorViewNodeParameterIfUniqueIdEquals(editorViewNode.Children[i], name);
            }
        }
        return "";
    }

    public EditorViewNode? GetEditorViewNodeIfUniqueIdEquals(EditorViewNode? editorViewNode, UniqueId? uniqueId)
    {
        if (editorViewNode!.UniqueId!.Equals(uniqueId))
        {
            return editorViewNode;
        }
        else
        {
            for (var i = 0; i < editorViewNode.Children.Count; i++)
            {
                EditorViewNode? checkEditorViewNode = GetEditorViewNodeIfUniqueIdEquals(editorViewNode.Children[i], uniqueId);
                if (checkEditorViewNode != null)
                {
                    return checkEditorViewNode;
                }
            }
        }
        return null;
    }


    public void UpdateCurrentComponentProperty(string name, string value)
    {
        SetEditorViewNodeParameterIfUniqueIdEquals(CurrentComponent, name, value);
        StateChanged();
    }


    public string? GetComponentPropertyValue(UniqueId? uniqueId, string name)
    {
        EditorViewNode? activeEditorViewNode = GetEditorViewNodeWithUniqueId(uniqueId);
        Dictionary<string, object> parameters = activeEditorViewNode!.Parameters;
        if (parameters.Count > 0)
        {
            {
                try
                {
                    var param = parameters[name];
                    return param!.ToString();
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                    return "";
                }
            }
        }
        else
        {
            return "";
        }
    }

    public EditorViewNode? GetEditorViewNodeWithUniqueId(UniqueId? uniqueId)
    {
        return GetEditorViewNodeIfUniqueIdEquals(EditorViewNode, uniqueId);
    }

    public void SetCurrentComponentToEditorViewNodeWithUniqueId(UniqueId? uniqueId)
    {
        EditorViewNode? editorViewNode = GetEditorViewNodeWithUniqueId(uniqueId);
        if (editorViewNode == null)
        {
            throw new Exception("GetEditorViewNodeWithUniqueId returned null");
        }
        CurrentComponent = editorViewNode;
    }

    public void SetProperties(Properties properties, UniqueId? uniqueId)
    {
        CurrentPropertiesForComponentUniqueId = uniqueId;
        _properties = properties;
        StateChanged();
    }


    public void StateChanged()
    {
        // Page page = Page.GetInstance();
        // if (EditorViewNode != null)
        //     page.EditorViewNode = EditorViewNode;
        // Page.UpdateInstance(page);
        StateHasChanged();
    }



    //Properties
    Properties _properties = new()
    {
        PropertyList = new List<Property>
        {
        }
    };

    static string _iconStr1 = @"<svg style=""width:50px"" xmlns=""http://www.w3.org/2000/svg"" class=""h-6 w-6"" fill=""none"" viewBox=""0 0 24 24"" stroke=""currentColor"" style=""width: 48px;"">
<path stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2"" d=""M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z""></path>
    </svg>";

    static string _buttonIcon = @"<svg style=""width:50px"" xmlns=""http://www.w3.org/2000/svg"" class=""h-6 w-6"" fill=""none"" viewBox=""0 0 24 24"" stroke=""currentColor"">
<path stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2"" d=""M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"" />
    </svg>";





    PaletteComponentCategories _paletteComponentCategories = new()
    {
        ComponentCategories = new List<PaletteComponentCategory>
        {

        }
    };


    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized EditorPage");
        var types = Assembly.GetExecutingAssembly().GetTypes();
        foreach (var type in types)
        {
            Console.WriteLine(type.Namespace);
            Console.WriteLine(type);
        }


    }


}
